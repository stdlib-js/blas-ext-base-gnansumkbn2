{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumkbn2( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( xget( xbuf, ix ) ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * xget( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gnansumkbn2\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas-ext-base-gnansumkbn2';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas-ext-base-gnansumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumkbn2.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["gnansumkbn2","N","x","strideX","offsetX","sum","ccs","ix","cs","cc","v","t","c","o","i","arraylike2object","accessorProtocol","xbuf","xget","data","accessors","isnan","abs","ndarray","stride2offset","setReadOnly","main"],"mappings":";;qgBAqDA,SAASA,EAAaC,EAAGC,EAAGC,EAASC,GACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,OAAO,EAGR,IADAY,EAAIE,EAAkBb,IACfc,iBACN,OCbF,SAAsBf,EAAGC,EAAGC,EAASC,GACpC,IAAIa,EACAC,EACAb,EACAC,EACAE,EACAC,EACAF,EACAG,EACAC,EACAC,EACAE,EASJ,GANAG,EAAOf,EAAEiB,KAGTD,EAAOhB,EAAEkB,UAAW,GAEpBb,EAAKH,EACY,IAAZD,EACJ,OAAKkB,EAAOH,EAAMD,EAAMV,IAChB,EAEDN,EAAIiB,EAAMD,EAAMV,GAKxB,IAHAF,EAAM,EACNC,EAAM,EACNE,EAAK,EACCM,EAAI,EAAGA,EAAIb,EAAGa,IACnBJ,EAAIQ,EAAMD,EAAMV,IACI,IAAfc,EAAOX,KACXC,EAAIN,EAAMK,EAETE,EADIU,EAAKjB,IAASiB,EAAKZ,GAClBL,EAAIM,EAAKD,EAETA,EAAEC,EAAKN,EAEbA,EAAMM,EACNA,EAAIH,EAAKI,EAERH,EADIa,EAAKd,IAAQc,EAAKV,GAChBJ,EAAGG,EAAKC,EAERA,EAAED,EAAKH,EAEdA,EAAKG,EACLL,GAAOG,GAERF,GAAMJ,EAEP,OAAOE,EAAMG,EAAKF,CACnB,CDtCSc,CAAWnB,EAAGY,EAAGV,EAASC,GAGlC,GADAG,EAAKH,EACY,IAAZD,EACJ,OAAKkB,EAAOnB,EAAGK,IACP,EAEDN,EAAIC,EAAGK,GAKf,IAHAF,EAAM,EACNC,EAAM,EACNE,EAAK,EACCM,EAAI,EAAGA,EAAIb,EAAGa,IACnBJ,EAAIR,EAAGK,IACa,IAAfc,EAAOX,KACXC,EAAIN,EAAMK,EAETE,EADIU,EAAKjB,IAASiB,EAAKZ,GAClBL,EAAIM,EAAKD,EAETA,EAAEC,EAAKN,EAEbA,EAAMM,EACNA,EAAIH,EAAKI,EAERH,EADIa,EAAKd,IAAQc,EAAKV,GAChBJ,EAAGG,EAAKC,EAERA,EAAED,EAAKH,EAEdA,EAAKG,EACLL,GAAOG,GAERF,GAAMJ,EAEP,OAAOE,EAAMG,EAAKF,CACnB,CEtDA,SAASN,EAAaC,EAAGC,EAAGC,GAC3B,OAAOoB,EAAStB,EAAGC,EAAGC,EAASqB,EAAevB,EAAGE,GAClD,CCDAsB,EAAAC,EAAA,UAAAH"}